#!/usr/bin/env ruby

# grab gems for all sub-scripts, without needing separate Gemfile
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'damerau-levenshtein', require: 'damerau-levenshtein'
  gem 'down', require: 'down'
  gem 'open3', require: "open3"
end

require_relative "add_wifi_no_root.rb"
require_relative "find_unknown_command.rb"
require_relative "launch_system_settings_app.rb"
require_relative "list_packages.rb"
require_relative "max_bright.rb"
require_relative "permissions"
require_relative "print_manual.rb"
require_relative "reboot_and_wait.rb"
require_relative "uninstall_package.rb"

known_commands = %w[add_wifi reboot max_bright list_packages help permissions settings_app uninstall_package]


command = ARGV[0]

if command == nil
  print_manual
  return
end

case command
when "add_wifi"
  # TODO validate args
  add_wifi_no_root(ARGV[1], ARGV[2])
when "reboot"
  reboot_and_wait
when "max_bright"
  max_bright
when "list_packages"
  list_packages
when "uninstall_package"
  uninstall_package(ARGV[1])
when "help"
  print_manual
when "settings_app"
  launch_system_settings_app
when "permissions"
  if ARGV[1].to_s.empty?
    puts "Failed to supply package. Correct syntax is 'ax permissions PACKAGE'"
    return
  end
  list_all_permissions(ARGV[1])
else
  puts command + " is not an ADBX command. See 'ax help'."
  possible_commands = find_unknown_command(known_commands, command)
  unless possible_commands.empty?
    puts "Did you mean?"
    possible_commands.each do |possible_command|
      puts "   " + possible_command
    end
  end
end
